diff '--color=auto' -ur onnxruntime-1.20.0.orig/cmake/CMakeLists.txt onnxruntime-1.20.0/cmake/CMakeLists.txt
--- onnxruntime-1.20.0.orig/cmake/CMakeLists.txt	2024-11-01 21:42:36.603265163 +0100
+++ onnxruntime-1.20.0/cmake/CMakeLists.txt	2024-11-01 21:43:32.019978182 +0100
@@ -617,6 +617,17 @@
   message(STATUS "Using Protocol Buffers ${Protobuf_VERSION}")
 endif()
 
+if (onnxruntime_ENABLE_PYTHON OR onnxruntime_USE_CUDA)
+  Find_Package(Microsoft.GSL)
+  if (Microsoft.GSL_FOUND)
+    message( STATUS "Microsoft.GSL Version: ${Microsoft.GSL_VERSION}")
+    mark_as_advanced(GSL_INCLUDE_DIRS)
+    list(APPEND onnxruntime_EXTERNAL_LIBRARIES ${Microsoft.GSL_LINK_FLAGS})
+  else ()
+    message(FATAL_ERROR "This build is patched to only use system GSL, but it can't be found.")
+  endif()
+endif()
+
 list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/external)
 include(external/onnxruntime_external_deps.cmake)
 
diff '--color=auto' -ur onnxruntime-1.20.0.orig/cmake/external/onnxruntime_external_deps.cmake onnxruntime-1.20.0/cmake/external/onnxruntime_external_deps.cmake
--- onnxruntime-1.20.0.orig/cmake/external/onnxruntime_external_deps.cmake	2024-11-01 21:42:36.540265489 +0100
+++ onnxruntime-1.20.0/cmake/external/onnxruntime_external_deps.cmake	2024-11-01 21:46:58.164910642 +0100
@@ -429,26 +429,6 @@
   endif()
 endif()
 
-if(onnxruntime_USE_CUDA)
-  FetchContent_Declare(
-    GSL
-    URL ${DEP_URL_microsoft_gsl}
-    URL_HASH SHA1=${DEP_SHA1_microsoft_gsl}
-    PATCH_COMMAND ${Patch_EXECUTABLE} --binary --ignore-whitespace -p1 < ${PROJECT_SOURCE_DIR}/patches/gsl/1064.patch
-    FIND_PACKAGE_ARGS 4.0 NAMES Microsoft.GSL
-  )
-else()
-  FetchContent_Declare(
-    GSL
-    URL ${DEP_URL_microsoft_gsl}
-    URL_HASH SHA1=${DEP_SHA1_microsoft_gsl}
-    FIND_PACKAGE_ARGS 4.0 NAMES Microsoft.GSL
-  )
-endif()
-set(GSL_TARGET "Microsoft.GSL::GSL")
-set(GSL_INCLUDE_DIR "$<TARGET_PROPERTY:${GSL_TARGET},INTERFACE_INCLUDE_DIRECTORIES>")
-onnxruntime_fetchcontent_makeavailable(GSL)
-
 find_path(safeint_SOURCE_DIR NAMES "SafeInt.hpp")
 if(NOT safeint_SOURCE_DIR)
   unset(safeint_SOURCE_DIR)
@@ -581,7 +561,7 @@
 
 set(onnxruntime_EXTERNAL_LIBRARIES ${onnxruntime_EXTERNAL_LIBRARIES_XNNPACK} ${WIL_TARGET} nlohmann_json::nlohmann_json
                                     ONNX::onnx ONNX::onnx_proto ${PROTOBUF_LIB} re2::re2 Boost::mp11 safeint_interface
-                                   flatbuffers::flatbuffers ${GSL_TARGET} ${ABSEIL_LIBS} date::date
+                                   flatbuffers::flatbuffers ${ABSEIL_LIBS} date::date
                                    ${ONNXRUNTIME_CLOG_TARGET_NAME})
 
 # The source code of onnx_proto is generated, we must build this lib first before starting to compile the other source code that uses ONNX protobuf types.
